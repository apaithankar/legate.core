name: Lint legate.core on GH

concurrency:
  group: ci-lint-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches:
      - "pull-request/[0-9]+"
      - "*branch-*"

jobs:
  pre-commit:
    runs-on: 'linux-amd64-cpu4'
    strategy:
      fail-fast: true
      matrix:
        config:
          - {jobName: '(must pass) pre-commit python-3.10', canFail: false, version: '3.10'}
          - {jobName: '(continue on error) pre-commit python-3.11', canFail: true, version: '3.11'}
          - {jobName: '(continue on error) pre-commit python-3.12', canFail: true,version: '3.12'}
    if: ${{ github.repository_owner == 'nv-legate' }}
    permissions:
      contents: read  # This is required for actions/checkout

    steps:
      - name: Checkout ${{ github.event.repository.name }} (= this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate requirements.txt
        run: |
          echo "shellcheck-py" > requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.config.version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: run pre-commit
        uses: pre-commit/action@v3.0.1
        continue-on-error: ${{ matrix.config.canFail }}

  test-configure:
    env:
      LEGATE_CORE_ARCH: arch-ci-test-lint
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true
    if: ${{ github.repository_owner == 'nv-legate' }}
    permissions:
      contents: read  # This is required for actions/checkout

    steps:
      - name: Checkout ${{ github.event.repository.name }} (= this repo)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate requirements.txt
        run: |
          rm -f requirements.txt
          echo pytest >> requirements.txt
          echo pytest-mock >> requirements.txt
          echo typing_extensions >> requirements.txt

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.config.version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest ./config/aedifix/tests

  tidy:
    env:
      LEGATE_CORE_ARCH: arch-ci-lint
    runs-on: 'linux-amd64-cpu16'
    strategy:
      fail-fast: true
    if: ${{ github.repository_owner == 'nv-legate' }}
    permissions:
      contents: read  # This is required for actions/checkout

    steps:
      - name: List machine info
        run: |
          uname -a
          lsb_release -a

      - name: Checkout ${{ github.event.repository.name }} (= this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: legate
          use-mamba: true

      - name: Get Date
        id: get-date-hash
        run: |
          echo "today=$(/bin/date -u '+%Y%m%d')" >> ${GITHUB_OUTPUT}
        shell: bash

      - name: Cache Conda env
        uses: actions/cache@v4
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date-hash.outputs.today }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 5
        id: cache

      - name: Update environment
        run: |
          mamba create -n legate cmake clang clang-tools elfutils
        if: steps.cache.outputs.cache-hit != 'true'

      - name: List Conda packages and info
        run: |
          conda info
          conda list

      - name: List clang-tidy version
        shell: bash -el {0}
        run: |
          clang-tidy --version
          # run-clang-tidy has no --version, so just print its location and help to make
          # sure it's there
          which run-clang-tidy
          run-clang-tidy --help

      - name: Configure legate.core
        shell: bash -el {0}
        # CMake Error: CMake was unable to find a build program corresponding to "Ninja".
        # CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build
        # tool.
        run: |
          ./configure --with-tests
          echo "LEGATE_CORE_DIR=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run clang-tidy
        run: |
          make tidy
