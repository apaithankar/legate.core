on:
  workflow_call:
    inputs:
      platform:
        type: string
        required: true
      target-device:
        type: string
        required: true
      build-mode:
        type: string
        required: true
      ucx-enabled:
        type: boolean
        required: true
      build-type:
        type: string
        required: true
      upload-enabled:
        type: boolean
        required: true
jobs:
  setup-build:
    name: Setup build
    runs-on: linux-amd64-cpu4
    outputs:
      runner_type: ${{ steps.set_runner.outputs.runner_type }}
    steps:
      - id: set_runner
        run: |
          if [ "${{ inputs.platform }}" = "linux" ]; then
            echo "runner_type=linux-amd64-cpu32" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.platform }}" = "mac" ]; then
            echo "runner_type=macos-latest"  >> $GITHUB_OUTPUT
          fi

  build:
    needs: setup-build
    if: ${{ github.repository_owner == 'nv-legate' }}
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-build.yml@v1.1.0
    with:
      client-repo: ${{ github.event.repository.name }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ needs.setup-build.outputs.runner_type }}
      build-type: ${{ inputs.build-type }}
      use-container: ${{ inputs.platform == 'linux' }}
      platform: ${{ inputs.platform }}
      dependencies-file: ""
      dependencies-workflow: ""
      legate-gh-ci-tag: "v1.1.0"
      build-mode: ${{ inputs.build-mode }}
      ucx-enabled: ${{ inputs.ucx-enabled }}
      upload-enabled: ${{ inputs.upload-enabled }}
    secrets: inherit

  build-docs:
    needs: setup-build
    if: ${{ github.repository_owner == 'nv-legate' && inputs.upload-enabled == false }}
    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-build.yml@v1.1.0
    with:
      client-repo: ${{ github.event.repository.name }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ needs.setup-build.outputs.runner_type }}
      build-type: docs
      use-container: ${{ inputs.platform == 'linux' }}
      platform: ${{ inputs.platform }}
      dependencies-file: ""
      dependencies-workflow: ""
      legate-gh-ci-tag: "v1.1.0"
      build-mode: ${{ inputs.build-mode }}
      ucx-enabled: ${{ inputs.ucx-enabled }}
      upload-enabled: ${{ inputs.upload-enabled }}
    secrets: inherit

  upload:
    needs: build
    runs-on: linux-amd64-gpu-v100-earliest-1
    container:
      options: -u root
      image: condaforge/miniforge3:latest
    if: ${{ github.repository_owner == 'nv-legate' && inputs.upload-enabled == true }}
    steps:
      - name: Set environment variables
        shell: bash --noprofile --norc -xeuo pipefail {0}
        run: |
          UCX_STR=${{ (inputs.ucx-enabled == true && '-ucx') || '' }}

          WITH_TESTS_STR=''
          if [[ ("${{ inputs.upload-enabled }}" == "false") && ("${{ inputs.build-type }}" != "ci") ]]; then       
            WITH_TESTS_STR='-with_tests'
          fi

          BUILD_MODE="${{ inputs.build-mode }}"
          BUILD_MODE_STR=""
          [ -n "${BUILD_MODE}" ] && BUILD_MODE_STR="-${BUILD_MODE}"

          echo "ARTIFACT_NAME=${{ inputs.platform }}-${{ inputs.build-type }}-${{ github.event.repository.name }}-${{ inputs.target-device }}${BUILD_MODE_STR}${UCX_STR}${WITH_TESTS_STR}-${{ github.sha }}" >> $GITHUB_ENV
          echo "ARTIFACTS_DIR=${{ github.workspace }}/artifacts"  >> $GITHUB_ENV
          echo "OUTPUT_FOLDER=conda-build/legate_core" >> $GITHUB_ENV
          echo "TARGET_PLATFORM=linux-64" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACTS_DIR }}

      - name: Display structure of downloaded artifacts
        run: |
          ls -aR $ARTIFACTS_DIR

      - name: Get Build Date
        run: |
          echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Dump relevant environment variables
        run: |
          echo "ARTIFACTS_DIR=$ARTIFACTS_DIR" 
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" 
          echo "TARGET_PLATFORM=$TARGET_PLATFORM"
          echo "BUILD_DATE=$BUILD_DATE"

      - name: Upload to URM
        run: |
          apt-get update
          apt-get install -y curl
          for f in $(find $ARTIFACTS_DIR/$OUTPUT_FOLDER/$TARGET_PLATFORM/. -name 'legate-core*.tar.bz2')
          do
            fname=$(basename $f)
            echo "File to upload: $fname"
            curl -usvc-legate-github:${{ secrets.URM_ARTIFACT_TOKEN }} -T $f "https://urm.nvidia.com/artifactory/sw-legate-conda-local/$TARGET_PLATFORM/$fname;buildDate=$BUILD_DATE;automatedTestingPassed=0;sha=${{ github.sha }}";
          done

  setup-test:
    name: Setup test
    if: inputs.upload-enabled == false
    needs:
      - build
    runs-on: linux-amd64-cpu4
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          set -xeuo pipefail
          MATRIX_JSON='{"include": ['
          RUNNERS=('linux-amd64-gpu-v100-latest-1:gpu:linux' 'linux-amd64-2gpu:gpu:linux' 'linux-amd64-cpu8:cpu:linux' 'macos-latest:cpu:mac')
          TEST_CONFIGS=('Python Unit Tests:python' 'C++ Unit Tests:cpp')

          for RUNNER in "${RUNNERS[@]}"; do
            IFS=':' read -ra RUNNER_INFO <<< "$RUNNER"
            RUNNER_NAME=${RUNNER_INFO[0]}
            TARGET_DEVICE=${RUNNER_INFO[1]}
            RUNNER_PLATFORM=${RUNNER_INFO[2]}

            if [[ "$TARGET_DEVICE" == "${{ inputs.target-device }}" && "$RUNNER_PLATFORM" == "${{ inputs.platform }}" ]]; then
              for TEST_CONFIG in "${TEST_CONFIGS[@]}"; do
                IFS=':' read -ra CONFIG_INFO <<< "$TEST_CONFIG"
                CONFIG_NAME=${CONFIG_INFO[0]}
                CONFIG_SCOPE=${CONFIG_INFO[1]}

                MATRIX_JSON+="{\"runner\": {\"name\": \"$RUNNER_NAME\", \"type\": \"$TARGET_DEVICE\", \"platform\": \"$RUNNER_PLATFORM\"}, \"test-config\": {\"name\": \"$CONFIG_NAME\", \"test-scope\": \"$CONFIG_SCOPE\"}},"
              done
            fi
          done

          MATRIX_JSON=$(echo "$MATRIX_JSON" | sed 's/,$//') # Remove the trailing comma
          MATRIX_JSON+=']}'
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  test-within-container:
    if: github.repository_owner == 'nv-legate' && inputs.platform == 'linux'
    needs:
      - setup-test

    name: ${{ matrix.test-config.name }} (${{ inputs.platform }}, ${{ inputs.target-device }}, ${{ inputs.build-mode }}, UCX=${{ inputs.ucx-enabled }})

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-test.outputs.matrix)}}

    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-test-within-container.yml@v1.1.0
    with:
      client-repo: ${{ github.event.repository.name }}
      build-type: ${{ inputs.build-type }}
      name: ${{ matrix.test-config.name }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ matrix.runner.name }}
      has-gpu: ${{ matrix.runner.type == 'gpu' }}
      test-options: ${{ matrix.test-config.test-scope }}
      platform: ${{ matrix.runner.platform }}
      legate-gh-ci-tag: "v1.1.0"
      build-mode: ${{ inputs.build-mode }}
      ucx-enabled: ${{ inputs.ucx-enabled }}
      upload-enabled: ${{ inputs.upload-enabled }}
    secrets: inherit


  test-without-container:
    if: github.repository_owner == 'nv-legate' && inputs.platform != 'linux'
    needs:
      - setup-test

    name: ${{ matrix.test-config.name }} (${{ inputs.platform }}, ${{ inputs.target-device }}, ${{ inputs.build-mode }}, UCX=${{ inputs.ucx-enabled }})

    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup-test.outputs.matrix)}}

    uses:
      nv-legate/legate-gh-ci/.github/workflows/gh-test-without-container.yml@v1.1.0
    with:
      client-repo: ${{ github.event.repository.name }}
      build-type: ${{ inputs.build-type }}
      name: ${{ matrix.test-config.name }}
      target-device: ${{ inputs.target-device }}
      runs-on: ${{ matrix.runner.name }}
      has-gpu: ${{ matrix.runner.type == 'gpu' }}
      test-options: ${{ matrix.test-config.test-scope }}
      platform: ${{ matrix.runner.platform }}
      legate-gh-ci-tag: "v1.1.0"
      build-mode: ${{ inputs.build-mode }}
      ucx-enabled: ${{ inputs.ucx-enabled }}
      upload-enabled: ${{ inputs.upload-enabled }}
    secrets: inherit
