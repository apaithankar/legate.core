#!/usr/bin/env python3
# SPDX-FileCopyrightText: Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.
from __future__ import annotations

import re
import sys

from util.re_replacement import RegexReplacement, Replacement

C_STDLIB_FUNCTIONS = (
    "abort",
    "abs",
    "asctime",
    "assert",
    "atexit",
    "atof",
    "atoi",
    "atol",
    "atomic_compare_exchange_strong",
    "atomic_compare_exchange_strong_explicit",
    "atomic_compare_exchange_weak",
    "atomic_compare_exchange_weak_explicit",
    "atomic_exchange",
    "atomic_exchange_explicit",
    "atomic_fetch",
    "atomic_fetch_key_explicit",
    "atomic_flag_clear",
    "atomic_flag_clear_explicit",
    "atomic_flag_test_and_set",
    "atomic_flag_test_and_set_explicit",
    "atomic_init",
    "atomic_is_lock_free",
    "atomic_load",
    "atomic_load_explicit",
    "atomic_signal_fence",
    "atomic_store",
    "atomic_store_explicit",
    "atomic_thread_fence",
    "bsearch",
    "btowc",
    "c16rtomb",
    "c32rtomb",
    "cabs",
    "cabsf",
    "cabsl",
    "cacos",
    "cacosf",
    "cacosh",
    "cacoshf",
    "cacoshl",
    "cacosl",
    "call_once",
    "calloc",
    "carg",
    "cargf",
    "cargl",
    "casin",
    "casinf",
    "casinh",
    "casinhf",
    "casinhl",
    "casinl",
    "catan",
    "catanf",
    "catanh",
    "catanhf",
    "catanhl",
    "catanl",
    "ccos",
    "ccosf",
    "ccosh",
    "ccoshf",
    "ccoshl",
    "ccosl",
    "cexp",
    "cexpf",
    "cexpl",
    "cimag",
    "cimagf",
    "cimagl",
    "clearerr",
    "clock",
    "clog",
    "clogf",
    "clogl",
    "cnd_broadcast",
    "cnd_destroy",
    "cnd_init",
    "cnd_signal",
    "cnd_timedwait",
    "cnd_wait",
    "conj",
    "conjf",
    "conjl",
    "cpow",
    "cpowf",
    "cpowl",
    "cproj",
    "cprojf",
    "cprojl",
    "creal",
    "crealf",
    "creall",
    "csin",
    "csinf",
    "csinh",
    "csinhf",
    "csinhl",
    "csinl",
    "csqrt",
    "csqrtf",
    "csqrtl",
    "ctan",
    "ctanf",
    "ctanh",
    "ctanhf",
    "ctanhl",
    "ctanl",
    "ctime",
    "difftime",
    "div",
    "exit",
    "fclose",
    "feclearexcept",
    "fegetenv",
    "fegetexceptflag",
    "fegetround",
    "feholdexcept",
    "feof",
    "feraiseexcept",
    "fesetenv",
    "fesetexceptflag",
    "fesetround",
    "fetestexcept",
    "feupdateenv",
    "fgetc",
    "fgetpos",
    "fgets",
    "fgetwc",
    "fgetws",
    "fopen",
    "fpclassify",
    "fprintf",
    "fputs",
    "fputwc",
    "fread",
    "free",
    "fscanf",
    "fseek",
    "fsetpos",
    "ftell",
    "fwide",
    "fwprintf",
    "fwrite",
    "fwscanf",
    "getc",
    "getchar",
    "getenv",
    "gets",
    "getwc",
    "getwchar",
    "gmtime",
    "imaxabs",
    "imaxdiv",
    "isalnum",
    "isalpha",
    "isblank",
    "iscntrl",
    "isdigit",
    "isfinite",
    "isgraph",
    "isgreater",
    "isgreaterequal",
    "isinf",
    "isless",
    "islessequal",
    "islessgreater",
    "islower",
    "isnan",
    "isnormal",
    "isprint",
    "ispunct",
    "isspace",
    "isunordered",
    "isupper",
    "iswalnum",
    "iswalpha",
    "iswcntrl",
    "iswctype",
    "iswdigit",
    "iswgraph",
    "iswlower",
    "iswprint",
    "iswpunct",
    "iswspace",
    "iswupper",
    "iswxdigit",
    "isxdigit",
    "labs",
    "ldiv",
    "localeconv",
    "localtime",
    "longjmp",
    "malloc",
    "mbrlen",
    "mbrtoc16",
    "mbrtoc32",
    "mbrtowc",
    "mbsinit",
    "mbsrtowcs",
    "memchr",
    "memcmp",
    "memcpy",
    "memmove",
    "memset",
    "mktime",
    "mtx_destroy",
    "mtx_init",
    "mtx_lock",
    "mtx_timedlock",
    "mtx_trylock",
    "mtx_unlock",
    "offsetof",
    "perror",
    "printf",
    "putc",
    "putchar",
    "puts",
    "putwc",
    "putwchar",
    "qsort",
    "raise",
    "rand",
    "realloc",
    "remove",
    "rename",
    "rewind",
    "scanf",
    "setbuf",
    "setjmp",
    "setlocale",
    "setvbuf",
    "signbit",
    "sprintf",
    "srand",
    "strcat",
    "strchr",
    "strcmp",
    "strcoll",
    "strcpy",
    "strcspn",
    "strerror",
    "strftime",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "strtod",
    "strtoimax",
    "strtok",
    "strtol",
    "strtoul",
    "strtoumax",
    "strxfrm",
    "swprintf",
    "swscanf",
    "system",
    "thrd_create",
    "thrd_current",
    "thrd_detach",
    "thrd_equal",
    "thrd_exit",
    "thrd_join",
    "thrd_sleep",
    "thrd_yield",
    "time",
    "tmpfile",
    "tolower",
    "toupper",
    "towctrans",
    "towlower",
    "towupper",
    "tss_create",
    "tss_delete",
    "tss_get",
    "tss_set",
    "ungetc",
    "ungetwc",
    "va_arg",
    "va_copy",
    "va_end",
    "va_start",
    "vfwprintf",
    "vswprintf",
    "vwprintf",
    "wcrtomb",
    "wcscat",
    "wcschr",
    "wcscmp",
    "wcscoll",
    "wcscpy",
    "wcscspn",
    "wcsftime",
    "wcslen",
    "wcsncat",
    "wcsncmp",
    "wcsncpy",
    "wcspbrk",
    "wcsrchr",
    "wcsrtombs",
    "wcsspn",
    "wcsstr",
    "wcstod",
    "wcstoimax",
    "wcstok",
    "wcstol",
    "wcstoul",
    "wcstoumax",
    "wcsxfrm",
    "wctob",
    "wctrans",
    "wctype",
    "wmemchr",
    "wmemcmp",
    "wmemcpy",
    "wmemmove",
    "wmemset",
    "wprintf",
    "wscanf",
)

C_STDLIB_TYPES = (
    "atomic_type",
    "atomic_bool",
    "atomic_char",
    "atomic_char16_t",
    "atomic_char32_t",
    "atomic_int",
    "atomic_int_fast16_t",
    "atomic_int_fast32_t",
    "atomic_int_fast64_t",
    "atomic_int_fast8_t",
    "atomic_int_least16_t",
    "atomic_int_least32_t",
    "atomic_int_least64_t",
    "atomic_int_least8_t",
    "atomic_intmax_t",
    "atomic_intptr_t",
    "atomic_llong",
    "atomic_long",
    "atomic_ptrdiff_t",
    "atomic_schar",
    "atomic_short",
    "atomic_size_t",
    "atomic_uchar",
    "atomic_uint",
    "atomic_uint_fast16_t",
    "atomic_uint_fast32_t",
    "atomic_uint_fast64_t",
    "atomic_uint_fast8_t",
    "atomic_uint_least16_t",
    "atomic_uint_least32_t",
    "atomic_uint_least64_t",
    "atomic_uint_least8_t",
    "atomic_uintmax_t",
    "atomic_uintptr_t",
    "atomic_ullong",
    "atomic_ulong",
    "atomic_ushort",
    "atomic_wchar_t",
    "atomic_flag",
    "char16_t",
    "char32_t",
    "clock_t",
    "cnd_t",
    "constraint_handler_t",
    "div_t",
    "double_t",
    "errno_t",
    "fenv_t",
    "fexcept_t",
    "FILE",
    "float_t",
    "fpos_t",
    "imaxdiv_t",
    "intwidth_t",
    "int_fast16_t",
    "int_fast32_t",
    "int_fast64_t",
    "int_fast8_t",
    "int_least16_t",
    "int_least32_t",
    "int_least64_t",
    "int_least8_t",
    "int16_t",
    "int32_t",
    "int64_t",
    "int8_t",
    "intmax_t",
    "intptr_t",
    "jmp_buf",
    "lconv",
    "ldiv_t",
    "lldiv_t",
    "max_align_t",
    "mbstate_t",
    "memory_order",
    "memory_order_acq_rel",
    "memory_order_acquire",
    "memory_order_consume",
    "memory_order_relaxed",
    "memory_order_release",
    "memory_order_seq_cst",
    "mtx_plain",
    "mtx_recursive",
    "mtx_t",
    "mtx_timed",
    "once_flag",
    "ptrdiff_t",
    "rsize_t",
    "sig_atomic_t",
    "size_t",
    "thrd_busy",
    "thrd_error",
    "thrd_nomem",
    "thrd_start_t",
    "thrd_success",
    "thrd_t",
    "thrd_timedout",
    "time_t",
    "timespec",
    "tss_dtor_t",
    "tss_t",
    "uintwidth_t",
    "uint_fast16_t",
    "uint_fast32_t",
    "uint_fast64_t",
    "uint_fast8_t",
    "uint_least16_t",
    "uint_least32_t",
    "uint_least64_t",
    "uint_least8_t",
    "uint16_t",
    "uint32_t",
    "uint64_t",
    "uint8_t",
    "uintmax_t",
    "uintptr_t",
    "wchar_t",
    "wctrans_t",
    "wctype_t",
    "wint_t",
)


def make_repl() -> list[Replacement]:
    cfun_re = "|".join(map(re.escape, C_STDLIB_FUNCTIONS))
    cfun_re = rf"(\w+\s+=\s+|^\s+)({cfun_re})\("

    ctype_str = list(map(re.escape, C_STDLIB_TYPES))
    ctype_str.extend(
        [
            # Add these wildcards in case the std ever adds larger or smaller
            # versions of them
            r"[u?]int[\d+]_t",
            r"[u?]int_fast[\d+]_t",
            r"[u?]int_least[\d+]_t",
            r"atomic_[u?]int[\d+]_t",
            r"atomic_[u?]int_fast[\d+]_t",
            r"atomic_[u?]int_least[\d+]_t",
            r"char[\d+]_t",
        ]
    )
    ctype_re = "|".join(ctype_str)
    ctype_re = rf"(\s+|<|\s+:\s+|\w+\s+=\s+|\(|^\s+)({ctype_re})([\s><;])"
    return [
        Replacement(cfun_re, r"\1std::\2(", flags=re.MULTILINE),
        Replacement(ctype_re, r"\1std::\2\3", flags=re.MULTILINE),
    ]


def main() -> int:
    return RegexReplacement(
        description=(
            "Convert C standard library functions and types to C++ equivalent"
        ),
        replacements=make_repl(),
    ).main()


if __name__ == "__main__":
    sys.exit(main())
