# SPDX-FileCopyrightText: Copyright (c) 2024 NVIDIA CORPORATION & AFFILIATES.
#                         All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related
# documentation and any modifications thereto. Any use, reproduction,
# disclosure or distribution of this material and related documentation
# without an express license agreement from NVIDIA CORPORATION or
# its affiliates is strictly prohibited.

# IMPORTANT:
#   * install_info.py is a generated file and should not be modified by hand
from __future__ import annotations

def get_libpath(lib_base_name: str, full_lib_name: str) -> str:
    from os.path import join, exists, dirname
    import sys
    import platform

    lg_path = dirname(dirname(__file__))
    so_ext = {
        "": "",
        "Java": ".jar",
        "Linux": ".so",
        "Darwin": ".dylib",
        "Windows": ".dll"
    }[platform.system()]

    def find_liblegate(libdir):
        if not libdir:
            return None

        def lib_exists(path: str) -> bool:
            return exists(join(libdir, path))

        for name in (
            full_lib_name,
            f"{lib_base_name}{so_ext}",
            f"liblegate{so_ext}",
        ):
            if lib_exists(name):
                return libdir
        return None

    from .util.fs import get_legate_paths

    return (
        find_liblegate(get_legate_paths().legate_lib_path) or
        find_liblegate(join(dirname(dirname(dirname(lg_path))), "lib")) or
        find_liblegate(join(dirname(dirname(sys.executable)), "lib")) or
        ""
    )


libpath: str = get_libpath("@legate_core_LIB_NAME@", "@legate_core_FULL_LIB_NAME@")

networks: list[str] = "@Legion_NETWORKS@".split()

max_dim: int = int("@Legion_MAX_DIM@")

max_fields: int = int("@Legion_MAX_FIELDS@")

conduit: str = "@GASNet_CONDUIT@"

build_type: str = "@CMAKE_BUILD_TYPE@"

# this is to support simpler templating on the cmake side
ON, OFF = True, False

use_cuda: bool = @Legion_USE_CUDA@

use_openmp: bool = @Legion_USE_OpenMP@
