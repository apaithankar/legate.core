#!/usr/bin/env bash

run_test_or_analysis() {
    set -x

    . legate-conda-utils
    . setup-utils;

    set_base_defs;
    cd "$PREBUILD_DIR"

    install_test_tools;

    install_legate_core_with_war;

    activate_conda_env;

    conda_info;

    set -xeuo pipefail

    # rename
    export LEGATE_CORE_DIR="${REPO_DIR}"

    # HACK: this should be done much better, and in a much more transparent manner... but
    # alas, we no longer have any control of the setup phases in github ci, so we must do
    # it here.
    if [[ -z "${LEGATE_CORE_ARCH:-}" ]]; then
        local locase_uname="$(uname | tr '[:upper:]' '[:lower:]')"
        LEGATE_CORE_ARCH="arch-ci-${locase_uname}-${COMPILER:-gcc}-py-pkgs-${LEGATE_CORE_BUILD_MODE%-gcc}"

        export LEGATE_CORE_ARCH
    fi

    cd "$LEGATE_CORE_DIR"

    case "$1" in
        "python")
            echo "Executing python tests..."
            if [[ ${LEGATE_CORE_ARCH} == *sanitizer* ]]; then
              echo "============================================================================"
              echo "x ------------------------------------------------------------------------ x"
              echo "Cannot yet handle running Python tests using Address Sanitizer, bailing!"
              echo "x ------------------------------------------------------------------------ x"
              echo "============================================================================"
              return 0
            fi

            ucx_libs=
            [ "${UCX_ENABLED}" = "ON" ] && ucx_libs=ucx\ openmpi\ openssh

            set +eou pipefail
            mamba install -y -n "${CONDA_ENV}" -c conda-forge psutil pytest pytest-mock ipython jupyter_client ${ucx_libs}
            set -eou pipefail

            cd $LEGATE_CORE_DIR
            # Leaving this here in case we ever decide to enable this. If we don't do
            # this, we get
            # ImportError: could not load libasan.6.so
            # when loading the Cython extension libs.
            if [[ ${LEGATE_CORE_ARCH} == *gcc-*-sanitizer* ]]; then
              # Trying to reproduce this on macOS? See
              # https://stackoverflow.com/questions/47619097/address-sanitizing-boost-python-modules
              #
              # The TL;DR is, however:
              #
              # asan_lib='/Library/Developer/CommandLineTools/usr/lib/clang/15.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib'
              #
              # py_paths='/path/to/legate.core.internal' (optional, only if you are using a venv)
              #
              # DYLD_INSERT_LIBRARIES=$asan_lib PYTHONPATH=$py_paths
              # /opt/homebrew/Cellar/python@3.11/3.11.5/Frameworks/Python.framework/Versions/3.11/Resources/Python.app/Contents/MacOS/Python
              # /path/to/your/file.py
              GCC_ASAN_PRELOAD=$(gcc -print-file-name=libasan.so)
              LD_PRELOAD="${GCC_ASAN_PRELOAD}" pytest tests/unit
            elif [[ ${LEGATE_CORE_ARCH} == *clang-*-sanitizer* ]]; then
              echo "Must properly implement Address sanitizer lib injection for Clang-based presets!"
              echo "See impls for GCC above"
              return 1
            else
              pytest tests/unit
            fi

            ;;
        "cpp")
            echo "Running C++ unit tests..."
            mamba install -y -n "${DEFAULT_CONDA_ENV:-legate}" -c conda-forge psutil

            WORKERS=""
            if [[ "${UCX_ENABLED}" == "ON" ]]; then
              set +eou pipefail
              mamba install -y -n "${CONDA_ENV}" ucx openmpi openssh
              set -eou pipefail
              WORKERS="-j 1"
            fi

            cd "${LEGATE_CORE_DIR}"

            EXTRA_ARGS=""
            # TODO (wonchanl, jfaibussowit) Sanitizers can raise false alarms if the code does
            # user-level threading, so we turn it off for sanitizer-enabled tests
            if [[ ${LEGATE_CORE_ARCH} == *sanitizer* ]]; then
              EXTRA_ARGS="-ll:force_kthreads"
              sysctl vm.mmap_rnd_bits=28
            fi
            python3 "${LEGATE_CORE_DIR}"/test.py --gtest-file ${CONDA_PREFIX}/bin/cpp_tests --verbose --debug ${WORKERS} --cpus 1 "${EXTRA_ARGS}"

            # Also do some multi-CPU testing
            if [[ "$(uname)" == "Darwin" ]]; then
                python3 "${LEGATE_CORE_DIR}"/test.py --gtest-file ${CONDA_PREFIX}/bin/cpp_tests --verbose --debug ${WORKERS} --cpus 2 "${EXTRA_ARGS}"
            else
                python3 "${LEGATE_CORE_DIR}"/test.py --gtest-file ${CONDA_PREFIX}/bin/cpp_tests --verbose --debug ${WORKERS} --cpus 4 "${EXTRA_ARGS}"
            fi

            [[ -f ${CONDA_PREFIX}/bin/gpu_tests ]] && {
              python3 "${LEGATE_CORE_DIR}"/test.py --gtest-file ${CONDA_PREFIX}/bin/gpu_tests --verbose --debug ${WORKERS} --cpus 1 "${EXTRA_ARGS}"
            }
            ;;

        *)
            echo "Invalid command: $1"
            return 1
            ;;
    esac

    return 0
}

(run_test_or_analysis "$@");
