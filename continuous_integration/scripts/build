#!/usr/bin/env bash
set -x

build_legate_ci() {
    set -xeo pipefail;
    build-legate-cpp;
    build-legate-wheel;
    build-legate-conda;
    copy_ci_artifacts;
}

build_legate_release() {
    set -xeo pipefail;

    mkdir -p /tmp/env_yaml /tmp/conda-build
    local conda_build_args=();
    conda_build_args+=(--override-channels);

    # The channel sequence below needs to be preserved 
    conda_build_args+=(-c nvidia/label/cuda-${CUDA_VERSION});
    conda_build_args+=(-c conda-forge);

    conda_build_args+=(--croot /tmp/conda-croot/legate_core);
    conda_build_args+=(--numpy 1.22);
    conda_build_args+=(--no-test);
    conda_build_args+=(--no-verify);
    conda_build_args+=(--no-build-id);
    conda_build_args+=("--build-id-pat=''");
    conda_build_args+=(--no-include-recipe);
    conda_build_args+=(--no-anaconda-upload);
    conda_build_args+=(--output-folder /tmp/conda-build/legate_core);

    GPU_ENABLED=true
    [ "${USE_CUDA:-}" = "OFF" ] && GPU_ENABLED=false

    UCX_CONFIGURED=true
    [ "${UCX_ENABLED:-}" = "OFF" ] && UCX_CONFIGURED=false

    UPLOAD_BUILD=true
    [ "${UPLOAD_ENABLED:-}" = "OFF" ] && UPLOAD_BUILD=false

    if [[ ${LEGATE_CORE_CMAKE_PRESET} == *debug* ]]; then
    debug_enabled=true
    else
    debug_enabled=false
    fi
    
    variantOpts=$(printf "{\"debug_enabled\": [$debug_enabled], \"debug_build\": [$debug_enabled], \"gpu_enabled\": [$GPU_ENABLED], \"ucx_configured\": [$UCX_CONFIGURED], \"upload_enabled\": [$UPLOAD_BUILD], \"python\": [$PYTHON_VERSION]}")

    conda_build_args+=(--variants "$variantOpts")

    conda mambabuild "${conda_build_args[@]}" conda/conda-build;

    copy_release_artifacts
}

copy_release_artifacts() {
    echo Copying release artifacts
    cp -r /tmp/out          "$ARTIFACTS_DIR"
    cp -r /tmp/conda-build  "$ARTIFACTS_DIR"
    ls -lahR $ARTIFACTS_DIR
}

_build_legate_release() {
    set -xeo pipefail;
    mkdir -p /tmp/env_yaml /tmp/conda-build

    conda mambabuild --output-folder /tmp/conda-build -c nvidia/label/cuda-${CUDA_VERSION} -c conda-forge --no-include-recipe conda/conda-build

    copy_release_artifacts;
}

_copy_release_artifacts() {
    echo Copying release artifacts
    ls -lahR /tmp/conda-build/legate_core/linux-64/
    mkdir -p "$ARTIFACTS_DIR"

    cp -r /tmp/conda-build/legate_core/linux-64 "$ARTIFACTS_DIR"
    ls -lahR $ARTIFACTS_DIR
}

copy_ci_artifacts() {
    echo Copying CI artifacts

    mkdir -p "$ARTIFACTS_DIR"

    cp -r /tmp/out          "$ARTIFACTS_DIR"
    cp -r /tmp/conda-build  "$ARTIFACTS_DIR"
}

copy_docs_artifacts() {
    echo Copying artifacts
    cp -r $REPO_DIR/docs/legate/core/build/html/* "$ARTIFACTS_DIR/."
}

build_docs() {
    set -x;
    cd $REPO_DIR;

    echo "Build doxygen documentation through install.py"
    conda run -n legate /bin/bash -c "./install.py --docs"

    echo "Build documentation using Makefile"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make html"

    echo "Run link checker"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make linkcheck"

    copy_docs_artifacts;
}

build_project() {
    . setup-utils;

    init_build_env "$@";

    case "$BUILD_TYPE" in
        ci) build_legate_ci;;
        release) build_legate_release;;
        docs) build_docs;;
        *) return 1;;
    esac
}

build_legate_fake() {
    set -xeuo pipefail;

    mkdir -p /tmp/out /tmp/conda-build/legate_core
    touch /tmp/out/legate-core-23.11.00-dummy.tar.bz2
    touch /tmp/conda-build/legate_core/dummy.txt

    copy_ci_artifacts;
}

(build_project "$@");