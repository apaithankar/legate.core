#!/usr/bin/env bash
set -x

build_legate_ci() {
    set -xeo pipefail;
    build-legate-cpp;
    build-legate-wheel;
    build-legate-conda;
    copy_ci_artifacts;
}

build_legate_release() {
    set -xeo pipefail;
    mkdir -p /tmp/env_yaml /tmp/conda-build

    conda mambabuild --output-folder /tmp/conda-build -c nvidia/label/cuda-${CUDA_VERSION} -c conda-forge --no-include-recipe conda/conda-build

    copy_release_artifacts;
}

copy_release_artifacts() {
    echo Copying release artifacts

    mkdir -p "$ARTIFACTS_DIR"

    cp /tmp/conda-build/linux-64/legate-core-*.tar.bz2 "$ARTIFACTS_DIR"
}

copy_ci_artifacts() {
    echo Copying CI artifacts

    mkdir -p "$ARTIFACTS_DIR"

    cp -r /tmp/out          "$ARTIFACTS_DIR"
    cp -r /tmp/conda-build  "$ARTIFACTS_DIR"
}

copy_docs_artifacts() {
    echo Copying artifacts
    cp -r $REPO_DIR/docs/legate/core/build/html/* "$ARTIFACTS_DIR/."
}

build_docs() {
    set -x;
    cd $REPO_DIR;

    echo "Build doxygen documentation through install.py"
    conda run -n legate /bin/bash -c "./install.py --docs"

    echo "Build documentation using Makefile"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make html"

    echo "Run link checker"
    cd $REPO_DIR/docs/legate/core
    conda run -n legate /bin/bash -c "make linkcheck"

    copy_docs_artifacts;
}

build_project() {
    . setup-utils;

    init_build_env "$@";

    case "$BUILD_TYPE" in
        ci) build_legate_ci;;
        release) build_legate_release;;
        docs) build_docs;;
        *) return 1;;
    esac
}

build_legate_fake() {
    set -xeuo pipefail;

    mkdir -p /tmp/out /tmp/conda-build/legate_core
    touch /tmp/out/legate-core-23.11.00-dummy.tar.bz2
    touch /tmp/conda-build/legate_core/dummy.txt

    copy_ci_artifacts;
}

(build_project "$@");
