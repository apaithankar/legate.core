#!/usr/bin/env bash
. pretty_printing.bash

setup_legate_core_env() {
    set -eou pipefail

    # rename REPO_DIR
    export LEGATE_CORE_DIR="${REPO_DIR}"

    # HACK: this should be done much better, and in a much more transparent manner... but
    # alas, we no longer have any control of the setup phases in github ci, so we must do
    # it here.
    if [[ -z "${LEGATE_CORE_ARCH:-}" ]]; then
        case "${BUILD_TYPE}" in
            ci|release)
                local locase_uname="$(uname | tr '[:upper:]' '[:lower:]')"
                LEGATE_CORE_ARCH="arch-ci-${locase_uname}-${COMPILER:-gcc}-py-pkgs-${LEGATE_CORE_BUILD_MODE%-gcc}"
                ;;
            docs)
                LEGATE_CORE_ARCH='arch-ci-linux-docs'
                ;;
            *) return 1;;
        esac
        export LEGATE_CORE_ARCH
    fi
    echo "export LEGATE_CORE_DIR=${LEGATE_CORE_DIR}"
    echo "export LEGATE_CORE_ARCH=${LEGATE_CORE_ARCH}"

    mkdir -p "${ARTIFACTS_DIR}/${LEGATE_CORE_ARCH}"
}

build_legate_release() {
    set -eo pipefail;

    mkdir -p /tmp/env_yaml /tmp/conda-build
    local conda_build_args=();
    conda_build_args+=(--quiet);
    conda_build_args+=(--override-channels);

    # Until real UCX 1.17 is not released
    # must come before conda-forge
    conda_build_args+=(-c https://raw.githubusercontent.com/nv-legate/ucx-package/main)
    conda_build_args+=(-c conda-forge);

    conda_build_args+=(--croot /tmp/conda-croot/legate_core);
    conda_build_args+=(--numpy 1.22);
    conda_build_args+=(--no-test);
    conda_build_args+=(--no-verify);
    conda_build_args+=(--no-build-id);
    conda_build_args+=("--build-id-pat=''");
    conda_build_args+=(--no-include-recipe);
    conda_build_args+=(--no-anaconda-upload);
    conda_build_args+=(--output-folder /tmp/conda-build/legate_core);

    GPU_ENABLED=true
    [ "${USE_CUDA:-}" = "OFF" ] && GPU_ENABLED=false

    UCX_CONFIGURED=true
    [ "${UCX_ENABLED:-}" = "OFF" ] && UCX_CONFIGURED=false

    UPLOAD_BUILD=true
    [ "${UPLOAD_ENABLED:-}" = "OFF" ] && UPLOAD_BUILD=false

    if [[ ${LEGATE_CORE_BUILD_MODE} == *debug* ]]; then
      debug_enabled=true
    else
      debug_enabled=false
    fi

    pkgVer="$(git -C $REPO_DIR describe --abbrev=0 --tags | $SED 's/[a-zA-Z]//g' | cut -d '.' -f -2).00"

    # convert '-' to '_' for meta.yaml to accept.
    build_mode_str=$(echo ${LEGATE_CORE_BUILD_MODE} | sed -r 's/-/_/g')

    variantOpts=$(printf "{\"debug_enabled\": [$debug_enabled], \"debug_build\": [$debug_enabled], \"build_mode_str\": [$build_mode_str], \"gpu_enabled\": [$GPU_ENABLED], \"ucx_configured\": [$UCX_CONFIGURED], \"upload_enabled\": [$UPLOAD_BUILD], \"python\": [$PYTHON_VERSION], \"package_version\": [$pkgVer]}")
    conda_build_args+=(--variants "$variantOpts")

    # Conda is far too chatty by default, spewing a great deal of cruft. Silence it to
    # only explicit warnings. If you want more verbose output, set this to 2 or higher.
    export CONDA_VERBOSITY=0
    # For whatever reason, the default buffering of conda/mamba is not sufficient, and
    # leads to garbled output in CI (mixing conda output and whatever build.sh prints). So
    # we need to force unbuffered output.
    run_command 'Mamba Preamble' stdbuf -o0 -e0 conda mambabuild "${conda_build_args[@]}" conda/conda-build;

    run_command 'Copy Artifacts' copy_release_artifacts
}

copy_release_artifacts() {
    echo Copying release artifacts
    cp -r /tmp/out          "$ARTIFACTS_DIR"
    cp -r /tmp/conda-build  "$ARTIFACTS_DIR"
    ls -lahR $ARTIFACTS_DIR
}

copy_docs_artifacts() {
    set -x
    echo Copying artifacts
    cp -r "${LEGATE_CORE_DIR}"/"${LEGATE_CORE_ARCH}"/cmake_build/docs/legate/core/sphinx/* "$ARTIFACTS_DIR/."
}

build_docs() {
    set -eou pipefail

    cd "${LEGATE_CORE_DIR}"
    set +u
    run_command 'Activate Conda' conda activate legate
    run_command 'List conda env' conda list
    set -u
    run_command 'Dump configure.py' cat "./config/examples/${LEGATE_CORE_ARCH}.py"
    run_command 'Configure Legate' "./config/examples/${LEGATE_CORE_ARCH}.py"
    # Install Legate.Core Python bindings so the Python docs build works
    run_command 'pip install Legate' python3 -m pip install . -vv
    run_command 'Build Documentation' make docs
    run_command 'Copy Artifacts' copy_docs_artifacts
}

build_project() {
    set -eou pipefail
    { set +x; } 2>/dev/null

    export LEGATE_CI=1
    export PYTHONUNBUFFERED=1
    run_command "Source setup-util" . setup-utils;
    run_command "Init build environment" init_build_env "$@";
    run_command "Setup Legate.Core Env" setup_legate_core_env

    git config --global --add safe.directory "$REPO_DIR/.git"

    case "${BUILD_TYPE}" in
        release) build_legate_release;;
        docs) build_docs;;
        *) return 1;;
    esac
}

(build_project "$@");
